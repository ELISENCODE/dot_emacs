#+STARTUP: overview
#+TITLE: EliseN Learns from UncleDavesEmacs
#+CREATOR: EliseN Learns from Dawid 'daedreth' Eckert
#+LANGUAGE: en
#+OPTIONS: num:nil
* Some notes
Specify links `C-c C-l`  
[[https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org][GitHub UncleDavesEmacs]]

** On the keybinding
I do my best to not pollute keymaps with my own keybindings. 
Most of the bindings I defined myself utilize the Super key (noted as s-). 
This is the least used modifier key together with Shift (noted as S-), 
thus using those, chances are 
all the bindings you already know and love are going to work flawlessly.
For all the others, just keep on reading.

* Minor setting
** Display line numbers
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

** Cusor position
Show lines and columns for your cursor on the modeline
#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
#+END_SRC

** Remove lame startup screen
We use an actual replacement for it, 
keep reading or head directy to `dashboard`.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

** no ugly gui elements
Disable menus and scrollbars, if using any of those, change -1 to 1.
#+BEGIN_SRC emacs-lisp
  ;; Write expression then C-x C-e runs the command eval-last-sexp
  (tool-bar-mode -1)
  ;; (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** subword
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

** clock
If prefer the 12hr-format, change the variable to `nil` instead of `t`.
*** Time format
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-format "%H:%M -%d %B %Y")
#+END_SRC

*** Enabling the mode
This turns on the clock globally.
#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
#+END_SRC

** electric
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\{ . ?\})
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\" . ?\")
			      ))
  (electric-pair-mode t)
#+END_SRC

** No backups
#+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC

** y-or-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** No bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Set UTF-8 encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

** pretty symbols
Change `lambda` to an actual symbol an a few others as well, only in the GUI 
version though
#+BEGIN_SRC emacs-lisp
  ; (when window-system
  ;       (use-package pretty-mode
  ;       :ensure t
  ;       :config
  ;       (global-pretty-mode t)))
#+END_SRC

** line highlight
`hl-line` is awesome! It's not very awesome in the terminal version of emacs
though, so we don't use that. Beside, it's only used for programming.
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))
  ; (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC

** better scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

* Window Manager
Everything regarding the WM or DE-like functionality is bundled here,
remove the entire section if you do not wish to use `exwm`
** exwm
The only time I actually had to use comments, this is for ease of removal if you
happer to not like `exwm`
#+BEGIN_SRC emacs-lisp
  (use-package exwm
    :ensure t
    :config

      ;; necessary to configure exwm manually
      (require 'exwm-config)

      ;; fringe size, most people prefer 1 
      (fringe-mode 3)

      ;; emacs as a daemon, use "emacsclient <filename>" to seamlessly edit files from the terminal directly in the exwm instance
      (server-start)

      ;; this fixes issues with ido mode, if you use helm, get rid of it
      (exwm-config-ido)

      ;; a number between 1 and 9, exwm creates workspaces dynamically so I like starting out with 1
      (setq exwm-workspace-number 1)

      ;; this is a way to declare truly global/always working keybindings
      ;; this is a nifty way to go back from char mode to line mode without using the mouse
      (exwm-input-set-key (kbd "s-r") #'exwm-reset)
      (exwm-input-set-key (kbd "s-k") #'exwm-workspace-delete)
      (exwm-input-set-key (kbd "s-w") #'exwm-workspace-swap)

      ;; the next loop will bind s-<number> to switch to the corresponding workspace
      (dotimes (i 10)
        (exwm-input-set-key (kbd (format "s-%d" i))
                            `(lambda ()
                               (interactive)
                               (exwm-workspace-switch-create ,i))))

      ;; the simplest launcher, I keep it in only if dmenu eventually stopped working or something
      (exwm-input-set-key (kbd "s-&")
                          (lambda (command)
                            (interactive (list (read-shell-command "$ ")))
                            (start-process-shell-command command nil command)))

      ;; an easy way to make keybindings work *only* in line mode
      (push ?\C-q exwm-input-prefix-keys)
      (define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)

      ;; simulation keys are keys that exwm will send to the exwm buffer upon inputting a key combination
      (exwm-input-set-simulation-keys
       '(
         ;; movement
         ([?\C-b] . left)
         ([?\M-b] . C-left)
         ([?\C-f] . right)
         ([?\M-f] . C-right)
         ([?\C-p] . up)
         ([?\C-n] . down)
         ([?\C-a] . home)
         ([?\C-e] . end)
         ([?\M-v] . prior)
         ([?\C-v] . next)
         ([?\C-d] . delete)
         ([?\C-k] . (S-end delete))
         ;; cut/paste
         ([?\C-w] . ?\C-x)
         ([?\M-w] . ?\C-c)
         ([?\C-y] . ?\C-v)
         ;; search
         ([?\C-s] . ?\C-f)))

      ;; this little bit will make sure that XF86 keys work in exwm buffers as well
      (dolist (k '(XF86AudioLowerVolume
                 XF86AudioRaiseVolume
                 XF86PowerOff
                 XF86AudioMute
                 XF86AudioPlay
                 XF86AudioStop
                 XF86AudioPrev
                 XF86AudioNext
                 XF86ScreenSaver
                 XF68Back
                 XF86Forward
                 Scroll_Lock
                 print))
      (cl-pushnew k exwm-input-prefix-keys))

      ;; this just enables exwm, it started automatically once everything is ready
      ;; (exwm-enable)
      )
#+END_SRC

* Terminal
** Setting default shell to bash
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

** Easy to remember keybinding
Super + Enter opens a new terminal
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC

* Try  
Try is a package that allows you to try out Emacs packages without
installing them. If you pass a URL to a plain text `.el`-file it evaluates
the content, without storing the file.
  
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC
  
* which-key
  Suggestions for completing the command
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

* Expand region
A simple package, takes your cursor and semantically expands the region, so 
words, sentences, maybe the contents of some parentheses.
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC

* hungry-delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
      (global-hungry-delete-mode))
#+END_SRC

* Kill ring
** popup-kill-ring
`M-y` browse kill-ring like browsing autocompletion items.
`C-n` and `C-p` totally work for this.
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC

* sudo edit
Super + e
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind
      ("s-e" . sudo-edit))
#+END_SRC

* dashboard
Quick look into latest projects and files.
Change the welcome message to whatever string you want and change the numbers to
suit your liking, I find 5 to be enough.
#+BEGIN_SRC emacs-lisp

#+END_SRC

* modeline
** spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC

** diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'beacon-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode)
    (diminish 'which-key-mode))
#+END_SRC

* dmenu
Together with ido-vertical it's a nice large menu with its own cache for most 
lauched applications.
`SUPER + SPACE`
Ex: if `s-SPC` not working, to launch Firefox: `M-x dmenu` then type `firefox`
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind("s-SPC" . 'dmenu))
#+END_SRC

* System monitor
A teeny-tiny system monitor that can be enable or disable at runtime, useful 
for checking performance with power-hungry processes in ansi-term
** symon
symon can be toggled on and off with `Super + h`.
Ex: if `s-h` not working, type `M-x symon` to launch it.
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("s-h" . symon-mode))
#+END_SRC

* beacon
** Every time you change buffers, the current position of your cursor will be briefly highlight now.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC

* Org
** Common settings
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  ; (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

** Line wrapping
#+BEGIN_SRC emacs-lisp
  ; (add-hook 'org-mode-hook '(lambda () (visual-line-mode 1)))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c '") 'org-edit-src-code)
#+END_SRC

** Easy-to-add emacs-lisp template
Hitting TAB after an "<el" in an org-mode file will create a template for 
elisp insertion.
#+BEGIN_SRC emacs-lisp
#+END_SRC

** Org Bullets
#+BEGIN_SRC emacs-lisp
  ; (use-package org-bullets
  ;   :ensure t
  ;   :config
  ;     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** Pomodoro Timer
`M-x org-timer-set-timer` or inside org mode file buffer `C-c C-x ;`
Type 25
`M-x org-timer-pause-or-continue`
`M-x org-timer-stop`

#+BEGIN_SRC emacs-lisp
  (require 'org)
  (setq org-clock-sound "~/Music/ding.wav")
#+END_SRC
   
* IDO
** enable ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC

** switch buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+END_SRC

* buffers
** kill all buffers
Keybinding Control+Meta+Super+k
#+BEGIN_SRC emacs-lisp
  (defun close-all-buffers ()
    "Kill all buffers without regard for their origin."
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'close-all-buffers)
#+END_SRC

** always kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    "Kills the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC

** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

** expert
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC

* avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
      ("M-s" . avy-goto-char))
#+END_SRC

* Text manipulation
** Mark-Multiple
This extensions allows your to quickly mark the next occurence of a region and
edit them all at once.
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-like-this))
#+END_SRC

** Improved kill-word
#+BEGIN_SRC emacs-lisp
  (defun daedreth/kill-inner-word ()
    "Kills the entire word your cursor is in. Equivalent to 'ciw' in vim."
    (interactive)
    (forward-char 1)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w k") 'daedreth/kill-inner-word)
#+END_SRC

** copy-whole-line
#+BEGIN_SRC emacs-lisp
  (defun daedreth/copy-whole-line ()
    "Copies a line without regard or cursor position."
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c l c") 'daedreth/copy-whole-line)
#+END_SRC

* config edit/reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC

** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

* rainbow
Mostly useful in web development or game development.
Highlight in the appropriate color: hexadecimal code color
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
      (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

* Show parens
It highlights matching parens when the cursor is just behind one of them
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

* Rainbow delimiters
Colors parentheses and other delimiters depending on their depth,
useful for any language using them, especially lisp.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
      ; (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
      (rainbow-delimiters-mode 1))
#+END_SRC

* switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcut
	  '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC

* window splitting function
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

* swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . 'swiper))
#+END_SRC

* auto completion

* yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :config
      (use-package yasnippet-snippets
	:ensure t)
      (yas-reload-all))
  #+END_SRC
  (use-package yasnippet
    :ensure t
    :config
      (use-package yasnippet-snippets
        :ensure t)
      (yas-reload-al

** company mode
I set the delay for company mode to kick in to half a second, I also make sure 
that it stars doing its magic after typing in only 2 characters.
`C-n` and `C-p` to move around the items.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
#+END_SRC

* flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
#+END_SRC

* specific language
Be it forcode or prose, completion is a must. `auto-completion` + `company`.
AC is forLua/LÖVE and Company for the rest.

Each category also has additional settings.

** c/c++
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'c-mode-hook 'yas-minor-mode)

  (use-package flycheck-clang-analyzer
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
       (flycheck-clang-analyzer-setup)))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

  (use-package company-c-headers
    :ensure t)

  (use-package company-irony
    :ensure t
    :config
    (setq company-backends '((company-c-headers
                              company-dabbrev-code
                              company-irony))))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC

** python
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'yas-minor-mode)
  (add-hook 'python-mode-hook 'flycheck-mode)

  (with-eval-after-load 'company
      (add-hook 'python-mode-hook 'company-mode))

  (use-package company-jedi
    :ensure t
    :config
      (require 'company)
      (add-to-list 'company-backends 'company-jedi))

  (defun python-mode-company-init ()
    (setq-local company-backends '((company-jedi
                                    company-etags
                                    company-dabbrev-code))))

  (use-package company-jedi
    :ensure t
    :config
      (require 'company)
      (add-hook 'python-mode-hook 'python-mode-company-init))
#+END_SRC

** emacs-lisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)

  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))

  (use-package slime-company
    :ensure t
    :init
      (require 'company)
      (slime-setup '(slime-fancy slime-company)))
#+END_SRC

** Common lisp indentation
*** Indenting the if special form
#+BEGIN_SRC emacs-lisp
  (put 'if 'lisp-indent-function nil)
#+END_SRC

*** Indenting the when and unless special forms
#+BEGIN_SRC emacs-lisp
  (put 'when 'lisp-indent-function 1)
  (put 'unless 'lisp-indent-function 1)
#+END_SRC

*** Indenting the do and do* special forms
#+BEGIN_SRC emacs-lisp
  (put 'do 'lisp-indent-function 2)
  (put 'do* 'lisp-indent-function 2)
#+END_SRC

** bash
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'yas-minor-mode)
  (add-hook 'shell-mode-hook 'flycheck-mode)
  (add-hook 'shell-mode-hook 'company-mode)

  (defun shell-mode-company-init ()
    (setq-local company-backends '((company-shell
                                    company-shell-env
                                    company-etags
                                    company-dabbrev-code))))

  (use-package company-shell
    :ensure t
    :config
      (require 'company)
      (add-hook 'shell-mode-hook 'shell-mode-company-init))
#+END_SRC

** lua/löve

* Follow along with IELM
<https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Lisp-02.org>

You can open up an interactive Emacs Lisp REPL in Emacs by running `M-x ielm`

I'll be using the following snippet for evaluating code in the REPL:

#+BEGIN_SRC emacs-lisp
  (defun efs/ielm-send-line-or-region ()
    (interactive)
    (unless (use-region-p)
      (forward-line 0)
      (set-mark-command nil)
      (forward-line 1))
    (backward-char 1)
    (let ((text (buffer-substring-no-properties (region-beginning)
						(region-end))))
      (with-current-buffer "*ielm*"
	(insert text)
	(ielm-send-input))
  
      (deactivate-mark)))
  
  (defun efs/show-ielm ()
    (interactive)
    (select-window (split-window-vertically -10))
    (ielm)
    (text-scale-set 1))
  
  (define-key org-mode-map (kbd "C-c C-e") 'efs/ielm-send-line-or-region)
  (define-key org-mode-map (kbd "C-c E") 'efs/show-ielm)
#+END_SRC

* Media
** EMMS with mpd
mpd: music player daemon: sits in the background, point it to a audio output, 
point it to your music directory and it does nothing unless connect to it with
a client and then actually tell it what to do.
mpc: music player client: to add songs, to play songs
*** Basic setup for mpdstate
#+BEGIN_SRC emacs-lisp
  (use-package emms
    :ensure t
    :config
      (require 'emms-setup)
      (require 'emms-player-mpd)
      (emms-all) ; don't change this to values you see on stackoverflow questions if you expect emms to work
      (setq emms-seek-seconds 5)
      (setq emms-player-list '(emms-player-mpd))
      (setq emms-info-functions '(emms-info-mpd))
      (setq emms-player-mpd-server-name "localhost")
      (setq emms-player-mpd-server-port "6601")
    :bind
      ("s-m p" . emms)
      ("s-m b" . emms-smart-browse)
      ("s-m r" . emms-player-mpd-update-all-reset-cache)
      ("<XF86AudioPrev>" . emms-previous)
      ("<XF86AudioNext>" . emms-next)
      ("<XF86AudioPlay>" . emms-pause)
      ("<XF86AudioStop>" . emms-stop))
#+END_SRC

*** MPC Setup
#+BEGIN_SRC emacs-lisp
  (setq mpc-host "localhost:6601")
#+END_SRC

*** Some more fun stuff
**** Starting the daemon from within emacs
If you have an absolutely massive music library, it might be a good idea to get rid of mpc-update and only invoke it manually when needed.
#+BEGIN_SRC emacs-lisp
  (defun mpd/start-music-daemon ()
    "Start MPD, connects to it and syncs the metadata cache."
    (interactive)
    (shell-command "mpd")
    (mpd/update-database)
    (emms-player-mpd-connect)
    (emms-cache-set-from-mpd-all)
    (message "MPD Started!"))
  (global-set-key (kbd "s-m c") 'mpd/start-music-daemon)
#+END_SRC

**** Killing the daemon from within emacs
#+BEGIN_SRC emacs-lisp
  (defun mpd/kill-music-daemon ()
    "Stops playback and kill the music daemon."
    (interactive)
    (emms-stop)
    (call-process "killall" nil nil nil "mpd")
    (message "MPD Killed!"))
  (global-set-key (kbd "s-m k") 'mpd/kill-music-daemon)
#+END_SRC

**** Updating the database easily
#+BEGIN_SRC emacs-lisp
  (defun mpd/update-database ()
    "Updates the MPD database synchronously."
    (interactive)
    (call-process "mpc" nil nil nil "update")
    (message "MPD Database Updated!"))
  (global-set-key (kbd "s-m u") 'mpd/update-database)
#+END_SRC
* Org Roam v2
<https://systemcrafters.cc/build-a-second-brain-in-emacs/getting-started-with-org-roam/>

`C-M-i` type Control+Alt+i

<https://systemcrafters.net/build-a-second-brain-in-emacs/capturing-notes-efficiently/>

Creating a topic-specific template
Creating a literature reference template
Creating a project template

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/RoamNotes")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
	:unnarrowed t)
       ("l" "programming language" plain
	"* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	:unnarrowed t)
       ("b" "book notes" plain
	(file "~/RoamNotes/Templates/BookNoteTemplate.org")
	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	:unnarrowed t)
       ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
	:unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   :map org-mode-map
	   ("C-M-i" . completion-at-point))
    :config
    (org-roam-setup))
#+END_SRC

* Mastering Git with Magit

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :config
      (setq magit-push-always-verify nil)
      (setq git-commit-summary-max-length 50)
      :bind
      ("C-x g" . 'magit-status))
  #+END_SRC
